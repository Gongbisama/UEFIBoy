# Travis CI builds


# Unecessarily verbose build matrix. Including multiple environments
# and using a few exclusion variables doesn't work as it should for
# some reason, so need to define everything. Thanks Travis >.<
matrix:
  include:
  # Native Builds
    - language: c
      os: linux
      env: BUILD=native CC=gcc CXX=g++ FRAMEWORK=SDL
      
    - os: linux
      env: BUILD=native CC=clang CXX=clang++ FRAMEWORK=SDL
      language: c
      
    - os: osx
      env: BUILD=native CC=clang CXX=clang++ FRAMEWORK=SDL
      language: c
      
    - os: linux
      env: BUILD=native CC=gcc CXX=g++ FRAMEWORK=SDL2 
      language: c
      
    - os: linux
      env: BUILD=native CC=clang CXX=clang++ FRAMEWORK=SDL2
      language: c
     
    - os: osx
      env: BUILD=native CC=clang CXX=clang++ FRAMEWORK=SDL2
      language: c

    # Android builds
    - os: linux
      env: BUILD=android 
      language: android
      android:
        components:
            - build-tools-21.1.1
            - android-15
            - sys-img-armeabi-v7a-android-15

    - os: osx
      env: BUILD=android
      language: android
      

    # IOS builds 
    - os: osx
      env: BUILD=IOS
      language: c
      
    # Emscripten Builds
    
    # Linux version doesn't have binaries for FastComp backend,
    # so it needs to be built from source which almost is always
    # longer than 50 mins. Need to precompile a binary for this
    - os: linux 
      env: BUILD=emscripten 
      language: c
      
    - os: osx
      env: BUILD=emscripten
      language: c
      
    # PSP Builds
    - os: linux
      env: BUILD=psp
      language: ruby
      services:
        - docker
       
    # Dreamcast Builds
    # Dreamcast Linux build was working before Travis upgraded their
    # infrastructure in Dec 2015. Need to look into why it's broken.
    - os: linux
      env: BUILD=dreamcast
      language: c
      
    - os: osx
      env: BUILD=dreamcast
      language: c

    - os: linux
      env: BUILD=vita
      language: ruby
      services:
        - docker

  allow_failures:
    - os : linux
      env: BUILD=dreamcast
    
    - os: linux
      env: BUILD=emscripten
      
    - os: osx
      env: BUILD=android
    
    - os: osx
      env: BUILD=dreamcast
    
    - os: osx
      env: BUILD=IOS
    
before_install:
  - touch ~/error.log


install:   
    - if [ "$BUILD" == "vita" ]; then docker build -t plutoboy_vita -f build/Vita/Dockerfile .; fi 
    - if [ "$BUILD" == "vita" ]; then docker run plutoboy_vita; fi
    
    - if [ "$BUILD" == "psp" ]; then docker build -t plutoboy_psp -f build/PSP/Dockerfile . ; fi
    - if [ "$BUILD" == "psp" ]; then docker run plutoboy_psp; fi
     
     # Native Linux build setup
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:zoogie/sdl2-snapshots; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$BUILD" == "native" ]; then sudo apt-get install scons; fi
    - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$FRAMEWORK" == "SDL" ]; then sudo apt-get -f install libsdl1.2-dev libsdl-net1.2-dev; fi
    
    - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$FRAMEWORK" == "SDL2" ]; then sudo apt-get -f install libsdl2-dev libsdl2-net-dev; fi


    # Native OSX Build setup
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi
    - if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$BUILD" == "native" ]; then brew install scons; fi
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install sdl sdl2 sdl_net sdl2_net; fi

    # Install Emscripten 
    
    # Update clang + python and install CMAKE on Linux
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:kubuntu-ppa/backports; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.6 main'; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get -qq update; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install build-essential; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get -qq install python llvm-3.6-dev libclang-3.6-dev clang-3.6; fi
   
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then export CC=clang CXX=clang++; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo rm -rf /usr/bin/clang; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo rm -rf /usr/bin/clang++; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo ln -s /usr/bin/clang-3.6 /usr/bin/clang; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo ln -s /usr/bin/clang++-3.6 /usr/bin/clang++; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo rm /usr/local/clang-3.4/bin/clang; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo rm /usr/local/clang-3.4/bin/clang++; fi

    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then wget https://cmake.org/files/v3.4/cmake-3.4.0-Linux-x86_64.tar.gz --no-check-certificate; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then mkdir cmake-dist; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then tar -xzf cmake-3.4.0-Linux-x86_64.tar.gz -C cmake-dist --strip-components=1; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then export PATH=$PWD/cmake-dist/bin:$PATH; fi
    - if [ "$BUILD" == "emscripten" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then export PATH=$PATH:/opt/local/bin:/opt/local/sbin:/usr/bin/c++:/usr/bin/make; fi
    
    - if [ "$BUILD" == "emscripten" ]; then wget https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz; fi
    - if [ "$BUILD" == "emscripten" ]; then tar zxvf emsdk-portable.tar.gz; fi
    - if [ "$BUILD" == "emscripten" ]; then cd emsdk-portable; fi
    - if [ "$BUILD" == "emscripten" ]; then ./emsdk update; fi
    - if [ "$BUILD" == "emscripten" ]; then ./emsdk install latest; fi
    - if [ "$BUILD" == "emscripten" ]; then ./emsdk activate latest; fi
    - if [ "$BUILD" == "emscripten" ]; then source ./emsdk_env.sh; fi
    - if [ "$BUILD" == "emscripten" ]; then cd ../build/Javascript; fi
    - if [ "$BUILD" == "emscripten" ]; then make; fi
    
   # Install KOS Toolchain 
    - if [ "$BUILD" == "dreamcast" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update; fi
    - if [ "$BUILD" == "dreamcast" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install texinfo; fi
    - if [ "$BUILD" == "dreamcast" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install --reinstall build-essential binutils; fi
    - if [ "$BUILD" == "dreamcast" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then git clone https://github.com/TimSimpson/KosVM; fi

    - if [ "$BUILD" == "dreamcast" ]; then sudo mkdir /opt/toolchains; fi
    - if [ "$BUILD" == "dreamcast" ]; then sudo chown -R $USER /opt/toolchains; fi
    - if [ "$BUILD" == "dreamcast" ]; then cd /opt/toolchains; fi
    - if [ "$BUILD" == "dreamcast" ]; then git clone git://cadcdev.git.sourceforge.net/gitroot/cadcdev/KallistiOS; fi
    - if [ "$BUILD" == "dreamcast" ]; then curl -L -o kos-ports.tar.gz http://sourceforge.net/projects/cadcdev/files/kallistios/2.0.0/kos-ports-2.0.0-src.tar.gz/download; fi
    - if [ "$BUILD" == "dreamcast" ]; then tar -zxvf kos-ports.tar.gz; fi
    - if [ "$BUILD" == "dreamcast" ]; then cd KallistiOS/utils/dc-chain; fi
    - if [ "$BUILD" == "dreamcast" ]; then ./download.sh; fi
    - if [ "$BUILD" == "dreamcast" ]; then ./unpack.sh; fi
    - if [ "$BUILD" == "dreamcast" ]; then ~/build/RossMeikleham/PlutoBoy/build/Dreamcast/output.sh; fi
    - if [ "$BUILD" == "dreamcast" ]; then cp ~/build/RossMeikleham/PlutoBoy/build/Dreamcast/dreamcast_kos_env.sh /opt/toolchains/KallistiOS/environ.sh; fi     
    - if [ "$BUILD" == "dreamcast" ]; then cd ../../; fi
    - if [ "$BUILD" == "dreamcast" ]; then source environ.sh; fi
    - if [ "$BUILD" == "dreamcast" ]; then make; fi
    - if [ "$BUILD" == "dreamcast" ]; then cd ../kos-ports; fi
    - if [ "$BUILD" == "dreamcast" ]; then make; fi

#Setup SDL2 framework for XCode IOS
    - if [ "$BUILD" == "IOS" ]; then git clone https://github.com/manifest/sdl-ios-framework; fi
    - if [ "$BUILD" == "IOS" ]; then cd sdl-ios-framework; fi 
    - if [ "$BUILD" == "IOS" ]; then gem install colorize; fi 
    - if [ "$BUILD" == "IOS" ]; then rake SDL2:build; fi
    - if [ "$BUILD" == "IOS" ]; then mkdir ~/Library/Frameworks/; fi 
    - if [ "$BUILD" == "IOS" ]; then cp -r build/sdl/SDL2.framework ~/Library/Frameworks/; fi

# Setting up Android build
    
    - if [ "$BUILD" == "android" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install ant ; fi  
    - if [ "$BUILD" == "android" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then wget http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin -O ndk.bin; fi

    - if [ "$BUILD" == "android" ] && [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install ant android-sdk ; fi 
    - if [ "$BUILD" == "android" ] && [ "$TRAVIS_OS_NAME" == "osx" ]; then export ANDROID_HOME=/usr/local/opt/android-sdk; fi
    

    - if [ "$BUILD" == "android" ] && [ "$TRAVIS_OS_NAME" == "osx" ]; then wget http://dl.google.com/android/ndk/android-ndk-r10e-darwin-x86_64.bin -O ndk.bin; fi
   
   
    - if [ "$BUILD" == "android" ]; then chmod a+x ndk.bin; fi     
    - if [ "$BUILD" == "android" ]; then ./ndk.bin > /dev/null; fi   
    - if [ "$BUILD" == "android" ]; then mv android-ndk-r10e android-ndk; fi
    - if [ "$BUILD" == "android" ]; then export PATH=`pwd`/android-ndk:$PATH; fi     
    - if [ "$BUILD" == "android" ]; then cd ~/build/RossMeikleham/PlutoBoy/build/Android ; fi     
    
    - if [ "$BUILD" == "android" ]; then android update project -p .; fi     
    - if [ "$BUILD" == "android" ]; then hg clone http://hg.libsdl.org/SDL jni/SDL; fi     
  

after_failure:
    tail ~/error.log --lines=1000


script:
    # Native builds
    - if [ "$BUILD" == "native" ]; then cd build/Unix; fi
    - if [ "$BUILD" == "native" ]; then scons cc=$CC framework=$FRAMEWORK mode=$MODE; fi
    
    #PSP builds
    - if [ "$BUILD" == "psp" ]; then cd ~/build/RossMeikleham/PlutoBoy/build/PSP; fi
    - if [ "$BUILD" == "psp" ];  then make; fi
    
    # Emscripten Builds
    - if [ "$BUILD" == "emscripten" ]; then cd ~/build/RossMeikleham/PlutoBoy/build/Javascript; fi
    - if [ "$BUILD" == "emscripten" ]; then make; fi

    #Dreamcast Builds
    - if [ "$BUILD" == "dreamcast" ]; then cd ~/build/RossMeikleham/PlutoBoy/build/Dreamcast; fi
    - if [ "$BUILD" == "dreamcast" ]; then make; fi
    
    # IOS Builds
    - if [ "$BUILD" == "IOS" ]; then cd ~/build/RossMeikleham/PlutoBoy/build/IOS; fi
    - if [ "$BUILD" == "IOS" ]; then xcodebuild -project Plutoboy.xcodeproj -target Plutoboy -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO; fi

    # Android Builds
    - if [ "$BUILD" == "android" ]; then ndk-build; fi     
    - if [ "$BUILD" == "android" ]; then ant clean; fi     
    - if [ "$BUILD" == "android" ]; then ant release; fi     
